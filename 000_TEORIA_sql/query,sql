-- **SELECT**: Specifica le colonne da visualizzare nei risultati di una query.
SELECT nome, cognome 
FROM Persona;

-- **Combinazioni Possibili:**
-- SELECT *: Seleziona tutte le colonne.
-- SELECT DISTINCT: Rimuove i duplicati.

-- **SELECT-WHERE**: Filtra i risultati in base a una condizione.
SELECT nome, cognome 
FROM Persona 
WHERE posizione = 'Ricercatore';

-- **Combinazioni Possibili:**
-- WHERE LIKE: Cerca valori che corrispondono a un modello.
-- WHERE IN: Specifica una serie di valori.
-- WHERE BETWEEN: Filtra valori in un intervallo.

-- **SELECT-ORDER BY**: Ordina i risultati in base a una o più colonne.
SELECT nome, cognome 
FROM Persona 
ORDER BY cognome DESC;

-- **Combinazioni Possibili:**
-- ORDER BY ASC: Ordinamento crescente (predefinito).

-- **SELECT-GROUP BY**: Raggruppa i risultati in base a una o più colonne.
SELECT posizione, COUNT(*) 
FROM Persona 
GROUP BY posizione;

-- **Combinazioni Possibili:**
-- GROUP BY con HAVING: Filtra i gruppi basati su condizioni aggregate.

-- **SELECT-HAVING**: Filtra i gruppi creati da GROUP BY.
SELECT posizione, COUNT(*) 
FROM Persona 
GROUP BY posizione 
HAVING COUNT(*) > 1;

-- **Combinazioni Possibili:**
-- HAVING con COUNT: Filtra i gruppi basati su un conteggio.

-- **JOIN**: Combina righe di due o più tabelle in base a una condizione comune.
SELECT Persona.nome, Progetto.nome 
FROM Persona 
JOIN AttivitaProgetto ON Persona.id = AttivitaProgetto.persona 
JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id;

-- **Combinazioni Possibili:**
-- INNER JOIN: Seleziona solo righe con corrispondenze in entrambe le tabelle.
-- LEFT JOIN: Seleziona tutte le righe dalla tabella a sinistra e le corrispondenze dalla tabella a destra.
-- RIGHT JOIN: Seleziona tutte le righe dalla tabella a destra e le corrispondenze dalla tabella a sinistra.
-- FULL JOIN: Seleziona tutte le righe quando c'è una corrispondenza in una delle tabelle.

-- **INSERT INTO**: Aggiunge nuove righe a una tabella.
INSERT INTO Persona (id, nome, cognome, posizione, stipendio) 
VALUES (1, 'Mario', 'Rossi', 'Ricercatore', 3000.00);

-- **Combinazioni Possibili:**
-- INSERT INTO ... SELECT: Inserisce righe selezionate da un'altra query.

-- **UPDATE**: Modifica le righe esistenti in una tabella.
UPDATE Persona 
SET stipendio = 3500.00 
WHERE id = 1;

-- **Combinazioni Possibili:**
-- UPDATE ... SET ... WHERE: Specifica le colonne da aggiornare e la condizione.

-- **DELETE FROM**: Rimuove righe da una tabella.
DELETE FROM Persona 
WHERE id = 1;

-- **Combinazioni Possibili:**
-- DELETE FROM ... WHERE: Specifica la condizione per l'eliminazione.

-- **CREATE TABLE**: Crea una nuova tabella.
CREATE TABLE Persona (
    id INTEGER PRIMARY KEY, 
    nome VARCHAR(100), 
    cognome VARCHAR(100), 
    posizione VARCHAR(50), 
    stipendio REAL
);

-- **Combinazioni Possibili:**
-- CREATE TABLE ... AS SELECT: Crea una tabella basata sui risultati di una query.

-- **ALTER TABLE**: Modifica una tabella esistente.
ALTER TABLE Persona 
ADD COLUMN data_nascita DATE;

-- **Combinazioni Possibili:**
-- ALTER TABLE ... DROP COLUMN: Rimuove una colonna da una tabella.

-- **DROP TABLE**: Rimuove una tabella esistente.
DROP TABLE Persona;

-- **Combinazioni Possibili:**
-- DROP TABLE IF EXISTS: Elimina una tabella solo se esiste.

-- **LIMIT**: Limita il numero di righe restituite da una query.
SELECT * 
FROM Persona 
LIMIT 5;

-- **Combinazioni Possibili:**
-- LIMIT con OFFSET: Per saltare un numero specifico di righe.
-- SELECT * FROM Persona LIMIT 5 OFFSET 10;

-- **DISTINCT**: Rimuove i duplicati dai risultati di una query.
SELECT DISTINCT posizione 
FROM Persona;

-- **Combinazioni Possibili:**
-- DISTINCT può essere usato in combinazione con SELECT, WHERE, ORDER BY.

-- **WHERE LIKE**: Cerca valori che corrispondono a un modello.
SELECT nome 
FROM Persona 
WHERE cognome LIKE 'R%';

-- **Combinazioni Possibili:**
-- WHERE LIKE può essere combinato con i caratteri jolly `%` (qualsiasi numero di caratteri) e `_` (un singolo carattere).

-- **WHERE IN**: Specifica una serie di valori.
SELECT nome 
FROM Persona 
WHERE posizione IN ('Ricercatore', 'Professore Ordinario');

-- **Combinazioni Possibili:**
-- WHERE IN può essere usato per confrontare una colonna con un insieme di valori.

-- **WHERE BETWEEN**: Filtra valori in un intervallo.
SELECT nome 
FROM Persona 
WHERE stipendio BETWEEN 2000 AND 5000;

-- **Combinazioni Possibili:**
-- WHERE BETWEEN è usato per valori numerici, date, o altre colonne ordinate.

-- **ORDER BY ASC/DESC**: Ordina i risultati in ordine crescente o decrescente.
SELECT nome 
FROM Persona 
ORDER BY stipendio DESC;

-- **Combinazioni Possibili:**
-- ORDER BY può essere applicato a più colonne per ordinamenti complessi.

-- **GROUP BY**: Raggruppa i risultati in base a una o più colonne.
SELECT posizione, COUNT(*) 
FROM Persona 
GROUP BY posizione;

-- **Combinazioni Possibili:**
-- GROUP BY può essere combinato con HAVING per filtri basati su aggregazioni.

-- **HAVING**: Filtra i gruppi creati da GROUP BY.
SELECT posizione, COUNT(*) 
FROM Persona 
GROUP BY posizione 
HAVING COUNT(*) > 1;

-- **Combinazioni Possibili:**
-- HAVING può essere usato con aggregazioni come COUNT, SUM, AVG, etc.

-- **JOIN INNER JOIN**: Seleziona solo righe con corrispondenze in entrambe le tabelle.
SELECT Persona.nome, Progetto.nome 
FROM Persona 
INNER JOIN AttivitaProgetto ON Persona.id = AttivitaProgetto.persona 
INNER JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id;

-- **Combinazioni Possibili:**
-- INNER JOIN può essere usato con più tabelle per combinare più fonti di dati.

-- **LEFT JOIN**: Seleziona tutte le righe dalla tabella a sinistra e le corrispondenze dalla tabella a destra.
SELECT Persona.nome, Progetto.nome 
FROM Persona 
LEFT JOIN AttivitaProgetto ON Persona.id = AttivitaProgetto.persona 
LEFT JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id;

-- **RIGHT JOIN**: Seleziona tutte le righe dalla tabella a destra e le corrispondenze dalla tabella a sinistra.
SELECT Persona.nome, Progetto.nome 
FROM Persona 
RIGHT JOIN AttivitaProgetto ON Persona.id = AttivitaProgetto.persona 
RIGHT JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id;

-- **FULL JOIN**: Seleziona tutte le righe quando c'è una corrispondenza in una delle tabelle.
SELECT Persona.nome, Progetto.nome 
FROM Persona 
FULL JOIN AttivitaProgetto ON Persona.id = AttivitaProgetto.persona 
FULL JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id;

-- **INSERT INTO ... SELECT**: Inserisce righe selezionate da un'altra query.
INSERT INTO Persona (id, nome, cognome, posizione, stipendio) 
SELECT id, nome, cognome, posizione, stipendio 
FROM AltraTabella;

-- **UPDATE ... SET ... WHERE**: Specifica le colonne da aggiornare e la condizione.
UPDATE Persona 
SET stipendio = 3500.00 
WHERE id = 1;

-- **DELETE FROM ... WHERE**: Specifica la condizione per l'eliminazione.
DELETE FROM Persona 
WHERE id = 1;

-- **CREATE TABLE**: Crea una nuova tabella.
CREATE TABLE Persona (
    id INTEGER PRIMARY KEY, 
    nome VARCHAR(100), 
    cognome VARCHAR(100), 
    posizione VARCHAR(50), 
    stipendio REAL
);

-- **CREATE TABLE ... AS SELECT**: Crea una tabella basata sui risultati di una query.
CREATE TABLE NuovaTabella AS 
SELECT * FROM Persona;

-- **ALTER TABLE ... ADD COLUMN**: Aggiunge una colonna a una tabella esistente.
ALTER TABLE Persona 
ADD COLUMN data_nascita DATE;

-- **ALTER TABLE ... DROP COLUMN**: Rimuove una colonna da una tabella.
ALTER TABLE Persona 
DROP COLUMN data_nascita;

-- **DROP TABLE**: Rimuove una tabella esistente.
DROP TABLE Persona;

-- **DROP TABLE IF EXISTS**: Elimina una tabella solo se esiste.
DROP TABLE IF EXISTS Persona;

-- **LIMIT**: Limita il numero di righe restituite da una query.
SELECT * 
FROM Persona 
LIMIT 5;

-- **LIMIT con OFFSET**: Per saltare un numero specifico di righe.
SELECT * 
FROM Persona 
LIMIT 5 OFFSET 10;

-- **DISTINCT**: Rimuove i duplicati dai risultati di una query.
SELECT DISTINCT posizione 
FROM Persona;

-- **WHERE LIKE**: Cerca valori che corrispondono a un modello.
SELECT nome 
FROM Persona 
WHERE cognome LIKE 'R%';

-- **WHERE IN**: Specifica una serie di valori.
SELECT nome 
FROM Persona 
WHERE posizione IN ('Ricercatore', 'Professore Ordinario');

-- **WHERE BETWEEN**: Filtra valori in un intervallo.
SELECT nome 
FROM Persona 
WHERE stipendio BETWEEN 2000 AND 5000;

-- **ORDER BY ASC/DESC**: Ordina i risultati in ordine crescente o decrescente.
SELECT nome 
FROM Persona 
ORDER BY stipendio DESC;

-- **GROUP BY**: Raggruppa i risultati in base a una o più colonne.
SELECT posizione, COUNT(*) 
FROM Persona 
GROUP BY posizione;

-- **HAVING**: Filtra i gruppi creati da GROUP BY.
SELECT posizione, COUNT(*) 
FROM Persona 
GROUP BY posizione 
HAVING COUNT(*) > 1;

-- **INNER JOIN**: Seleziona solo righe con corrispondenze in entrambe le tabelle.
SELECT Persona.nome, Progetto.nome 
FROM Persona 
INNER JOIN AttivitaProgetto ON Persona.id = AttivitaProgetto.persona 
INNER JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id;

-- **LEFT JOIN**: Seleziona tutte le righe dalla tabella a sinistra e le corrispondenze dalla tabella a destra.
SELECT Persona.nome, Progetto.nome 
FROM Persona 
LEFT JOIN AttivitaProgetto ON Persona.id = AttivitaProgetto.persona 
LEFT JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id;

-- **RIGHT JOIN**: Seleziona tutte le righe dalla tabella a destra e le corrispondenze dalla tabella a sinistra.
SELECT Persona.nome, Progetto.nome 
FROM Persona 
RIGHT JOIN AttivitaProgetto ON Persona.id = AttivitaProgetto.persona 
RIGHT JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id;

-- **FULL JOIN**: Seleziona tutte le righe quando c'è una corrispondenza in una delle tabelle.
SELECT Persona.nome, Progetto.nome 
FROM Persona 
FULL JOIN AttivitaProgetto ON Persona.id = AttivitaProgetto.persona 
FULL JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id;




---------------------------------SUBQUERY----------------------------ù

--Le subquery possono essere utilizzate per filtrare, calcolare o ottenere dati che poi vengono utilizzati nella query principale. Offrono la possibilità di fare query complesse in modo modulare.

-- Seleziona i nomi delle persone che hanno partecipato a progetti con un budget maggiore di 50000
SELECT nome
FROM Persona
WHERE id IN (
    SELECT persona
    FROM AttivitaProgetto
    JOIN Progetto ON AttivitaProgetto.progetto = Progetto.id
    WHERE Progetto.budget > 50000
);

-- Usa una subquery per calcolare la durata media delle attività per ciascun progetto
SELECT progetto, AVG(oreDurata) AS durata_media
FROM (
    SELECT progetto, oreDurata
    FROM AttivitaProgetto
) AS Attivita
GROUP BY progetto;

-- Seleziona il nome e lo stipendio delle persone con lo stipendio più alto rispetto alla media
SELECT nome, stipendio,
       (SELECT AVG(stipendio) FROM Persona) AS stipendio_medio
FROM Persona
WHERE stipendio > (SELECT AVG(stipendio) FROM Persona);

--Le CTE sono query temporanee che possono essere referenziate nella query principale. Sono utili per semplificare query complesse e migliorare la leggibilità.

-- CTE per calcolare la durata totale di ogni progetto
WITH DurataTotale AS (
    SELECT progetto, SUM(oreDurata) AS totale_ore
    FROM AttivitaProgetto
    GROUP BY progetto
)
-- Usa la CTE per selezionare i progetti con una durata totale superiore a 100 ore
SELECT nome, totale_ore
FROM DurataTotale
JOIN Progetto ON DurataTotale.progetto = Progetto.id
WHERE totale_ore > 100;

-- CTE per trovare i progetti attivi e il numero di attività per progetto
WITH ProgettiAttivi AS (
    SELECT id AS progetto_id, nome
    FROM Progetto
    WHERE fine IS NULL OR fine > CURRENT_DATE
),
AttivitaPerProgetto AS (
    SELECT progetto, COUNT(*) AS num_attivita
    FROM AttivitaProgetto
    GROUP BY progetto
)

-- Usa le CTE per ottenere i dettagli dei progetti attivi con il numero di attività
SELECT P.nome, A.num_attivita
FROM ProgettiAttivi P
JOIN AttivitaPerProgetto A ON P.progetto_id = A.progetto;


--Le funzioni di aggregazione permettono di calcolare valori aggregati su gruppi di righe. Sono essenziali per riassumere e analizzare i dati.

-- Conta il numero di persone per posizione
SELECT posizione, COUNT(*) AS numero_persone
FROM Persona
GROUP BY posizione;

-- Calcola la somma e la media degli stipendi per ogni posizione
SELECT posizione, SUM(stipendio) AS totale_stipendi, AVG(stipendio) AS stipendio_medio
FROM Persona
GROUP BY posizione;

-- Trova il massimo e il minimo stipendio
SELECT MAX(stipendio) AS stipendio_massimo, MIN(stipendio) AS stipendio_minimo
FROM Persona;

-- Calcola la durata totale delle attività per ciascun progetto e tipo di lavoro
SELECT progetto, tipo, SUM(oreDurata) AS durata_totale
FROM AttivitaProgetto
GROUP BY progetto, tipo
HAVING SUM(oreDurata) > 50;

